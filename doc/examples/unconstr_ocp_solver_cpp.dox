/*!

\page subpage_unconstr_ocp_solver_example_cpp Robot manipulator example of robotoc::UnconstrOCPSolver and robotoc::UnconstrParNMPCSolver in C++

This page explains the example code in examples/iiwa14/task_space_ocp.cpp.
Required header files are as follows.
```
#include <string>
#include <memory>

#include "Eigen/Core"

#include "robotoc/solver/unconstr_ocp_solver.hpp"
#include "robotoc/solver/unconstr_parnmpc_solver.hpp"
#include "robotoc/unconstr/unconstr_ocp.hpp"
#include "robotoc/unconstr/unconstr_parnmpc.hpp"
#include "robotoc/robot/robot.hpp"
#include "robotoc/robot/se3.hpp"
#include "robotoc/cost/cost_function.hpp"
#include "robotoc/cost/configuration_space_cost.hpp"
#include "robotoc/cost/time_varying_task_space_6d_cost.hpp"
#include "robotoc/constraints/constraints.hpp"
#include "robotoc/constraints/joint_position_lower_limit.hpp"
#include "robotoc/constraints/joint_position_upper_limit.hpp"
#include "robotoc/constraints/joint_velocity_lower_limit.hpp"
#include "robotoc/constraints/joint_velocity_upper_limit.hpp"
#include "robotoc/constraints/joint_torques_lower_limit.hpp"
#include "robotoc/constraints/joint_torques_upper_limit.hpp"
```

First, construct a time-varying reference for end-effector.
```
class TimeVaryingTaskSpace6DRef final : public robotoc::TimeVaryingTaskSpace6DRefBase {
public:
  TimeVaryingTaskSpace6DRef() 
    : TimeVaryingTaskSpace6DRefBase() {
    rotm_  <<  0, 0, 1, 
               0, 1, 0,
              -1, 0, 0;
    pos0_ << 0.546, 0, 0.76;
    radius_ = 0.05;
  }

  ~TimeVaryingTaskSpace6DRef() {}

  void update_SE3_ref(const double t, robotoc::SE3& SE3_ref) const override {
    Eigen::Vector3d pos(pos0_);
    pos.coeffRef(1) += radius_ * sin(M_PI*t);
    pos.coeffRef(2) += radius_ * cos(M_PI*t);
    SE3_ref = robotoc::SE3(rotm_, pos);
  }

  bool isActive(const double t) const override {
    return true;
  }

private:
  double radius_;
  Eigen::Matrix3d rotm_;
  Eigen::Vector3d pos0_;
};

int main(int argc, char *argv[]) {
```

We define the robot model.
```
  const std::string path_to_urdf = "../iiwa_description/urdf/iiwa14.urdf";
  robotoc::Robot robot(path_to_urdf);
  robot.setJointEffortLimit(Eigen::VectorXd::Constant(robot.dimu(), 50));
  robot.setJointVelocityLimit(Eigen::VectorXd::Constant(robot.dimv(), M_PI_2));
```

Next, we construct the cost function.
```
  auto cost = std::make_shared<robotoc::CostFunction>();
  auto config_cost = std::make_shared<robotoc::ConfigurationSpaceCost>(robot);
  config_cost->set_q_weight(Eigen::VectorXd::Constant(robot.dimv(), 0.1));
  config_cost->set_qf_weight(Eigen::VectorXd::Constant(robot.dimv(), 0.1));
  config_cost->set_v_weight(Eigen::VectorXd::Constant(robot.dimv(), 0.0001));
  config_cost->set_vf_weight(Eigen::VectorXd::Constant(robot.dimv(), 0.0001));
  config_cost->set_a_weight(Eigen::VectorXd::Constant(robot.dimv(), 0.0001));
  cost->push_back(config_cost);
  const int ee_frame_id = 22; 
  auto ref = std::make_shared<TimeVaryingTaskSpace6DRef>();
  auto task_cost = std::make_shared<robotoc::TimeVaryingTaskSpace6DCost>(robot, ee_frame_id, ref);
  task_cost->set_q_weight(Eigen::Vector3d::Constant(1000), Eigen::Vector3d::Constant(1000));
  task_cost->set_qf_weight(Eigen::Vector3d::Constant(1000), Eigen::Vector3d::Constant(1000));
  cost->push_back(task_cost);
```

We also construct the constraints.
```
  auto constraints          = std::make_shared<robotoc::Constraints>();
  auto joint_position_lower = std::make_shared<robotoc::JointPositionLowerLimit>(robot);
  auto joint_position_upper = std::make_shared<robotoc::JointPositionUpperLimit>(robot);
  auto joint_velocity_lower = std::make_shared<robotoc::JointVelocityLowerLimit>(robot);
  auto joint_velocity_upper = std::make_shared<robotoc::JointVelocityUpperLimit>(robot);
  auto joint_torques_lower  = std::make_shared<robotoc::JointTorquesLowerLimit>(robot);
  auto joint_torques_upper  = std::make_shared<robotoc::JointTorquesUpperLimit>(robot);
  constraints->push_back(joint_position_lower);
  constraints->push_back(joint_position_upper);
  constraints->push_back(joint_velocity_lower);
  constraints->push_back(joint_velocity_upper);
  constraints->push_back(joint_torques_lower);
  constraints->push_back(joint_torques_upper);
  constraints->setBarrier(1.0e-03);
```

Finally, we can construct the optimal control solver!
```
  const double T = 6;
  const int N = 120;
  const int nthreads = 4;
  robotoc::UnconstrOCP ocp_solver(robot, cost, constraints, T, N);
  robotoc::UnconstrOCPSolver ocp_solver(ocp, nthreads);
```
or ParNMPC solver!
```
  const double T = 6;
  const int N = 120;
  const int nthreads = 4;
  robotoc::UnconstrParNMPC parnmpc(robot, cost, constraints, T, N);
  robotoc::UnconstrParNMPCSolver parnmpc_solver(parnmpc, nthreads);
```

Let's run the solver!
```
  const double t = 0;
  Eigen::VectorXd q = Eigen::VectorXd::Zero(robot.dimq());
  q << 0, M_PI_2, 0, M_PI_2, 0, M_PI_2, 0;
  const Eigen::VectorXd v = Eigen::VectorXd::Zero(robot.dimv());

  ocp_solver.setSolution("q", q); // initial state.
  ocp_solver.setSolution("v", v); // initial state.
  ocp_solver.initConstraints(); // initialize the slack and dual variables of the primal-dual interior point method.
  std::cout << "Initial KKT error: " << ocp_solver.KKTError(t, q, v) << std::endl;
  ocp_solver.solve(t, q, v);
  std::cout << "KKT error after convergence: " << ocp_solver.KKTError(t, q, v) << std::endl;
  std::cout << ocp_solver.getSolverStatistics() << std::endl; // print solver statistics

  return 0;
}
```
*/