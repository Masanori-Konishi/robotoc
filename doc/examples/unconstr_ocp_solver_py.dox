/*!

\page subpage_unconstr_ocp_solver_example_py Robot manipulator example of robotoc::UnconstrOCPSolver and robotoc::UnconstrParNMPCSolver in Python

This page explains the example code in examples/iiwa14/python/config_space_ocp.py.

<img src="https://raw.githubusercontent.com/wiki/mayataka/robotoc/images/config_ocp.gif" width="140">

Required imports are as follows.
```
import robotoc
import numpy as np
import math

```

First, define the robot model.
```
model_info = robotoc.RobotModelInfo()
model_info.urdf_path = "../iiwa_description/urdf/iiwa14.urdf"
robot = robotoc.Robot(model_info)

robot.set_joint_effort_limit(np.full(robot.dimu(), 50)) # change the joint limits
robot.set_joint_velocity_limit(np.full(robot.dimv(), 0.5*math.pi)) # change the joint limits
```

Next, we construct the cost function.
```
cost = robotoc.CostFunction()
config_cost = robotoc.ConfigurationSpaceCost(robot)
q_ref = np.array([0, 0.5*math.pi, 0, 0.5*math.pi, 0, 0.5*math.pi, 0]) 
config_cost.set_q_ref(q_ref)
config_cost.set_q_weight(np.full(robot.dimv(), 10))
config_cost.set_q_weight_terminal(np.full(robot.dimv(), 10))
config_cost.set_v_weight(np.full(robot.dimv(), 0.01))
config_cost.set_v_weight_terminal(np.full(robot.dimv(), 0.01))
config_cost.set_a_weight(np.full(robot.dimv(), 0.01))
cost.push_back(config_cost)
```

Next, we construct the constraints.
```
constraints           = robotoc.Constraints(barrier_param=1.0e-03, fraction_to_boundary_rule=0.995)
joint_position_lower = robotoc.JointPositionLowerLimit(robot)
joint_position_upper = robotoc.JointPositionUpperLimit(robot)
joint_velocity_lower = robotoc.JointVelocityLowerLimit(robot)
joint_velocity_upper = robotoc.JointVelocityUpperLimit(robot)
joint_torques_lower  = robotoc.JointTorquesLowerLimit(robot)
joint_torques_upper  = robotoc.JointTorquesUpperLimit(robot)
constraints.push_back(joint_position_lower)
constraints.push_back(joint_position_upper)
constraints.push_back(joint_velocity_lower)
constraints.push_back(joint_velocity_upper)
constraints.push_back(joint_torques_lower)
constraints.push_back(joint_torques_upper)
```

Finally, we can construct the optimal control solver!
```
T = 3.0
N = 60
ocp = robotoc.OCP(robot, cost, constraints, T, N)
solver_options = robotoc.SolverOptions()
solver_options.nthreads = 4
ocp_solver = robotoc.UnconstrOCPSolver(ocp=ocp, solver_options=solver_options)
```
or ParNMPC solver!
```
T = 3.0
N = 60
parnmpc = robotoc.OCP(robot, cost, constraints, T, N)
solver_options = robotoc.SolverOptions()
solver_options.nthreads = 4
ocp_solver = robotoc.UnconstrParNMPCSolver(ocp=ocp, solver_options=solver_options)
```

Let's run the solver! 
```
t = 0.
q = np.array([0.5*math.pi, 0, 0.5*math.pi, 0, 0.5*math.pi, 0, 0.5*math.pi]) # initial state. 
v = np.zeros(robot.dimv()) # initial state.

ocp_solver.set_solution("q", q) # set the initial guess of the solution.
ocp_solver.set_solution("v", v) # set the initial guess of the solution.
ocp_solver.init_constraints() # initialize the slack and dual variables of the primal-dual interior point method.
print("Initial KKT error: ", ocp_solver.KKT_error(t, q, v))
ocp_solver.solve(t, q, v, init_solver=True)
print("KKT error after convergence: ", ocp_solver.KKT_error(t, q, v))
print(ocp_solver.get_solver_statistics()) # print solver statistics
```

We can visualize the solution trajectory as
```
viewer = robotoc.utils.TrajectoryViewer(model_info=model_info, viewer_type='meshcat')
viewer.set_camera_transform_meshcat(camera_tf_vec=[0.5, -3.0, 0.0], zoom=2.0)
viewer.display(ocp_solver.get_time_discretization(), 
               ocp_solver.get_solution('q'))
```

*/