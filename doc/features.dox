/*!

\page page_features Features of optimal control solvers

@tableofcontents

\section solvers_list List of optimal control solvers 
The following three solvers are available:
- `robotoc::OCPSolver`: Optimal control solver for robot systems with rigid contacts and/or a floating base. This solver can optimize the trajectory and switching times simultaneously.
- `robotoc::UnconstrOCPSolver`: Optimal control solver for robot systems without rigid contacts or a floating base. More efficient than `robotoc::OCPSolver`.
- `robotoc::UnconstrParNMPCSolver`: Optimal control solver for robot systems without rigid contacts or a floating base. Possibly very efficient when the number of available CPU cores is very large.

\section common_features Common features among solvers
The common features in mathematical formulation, algorithms, and implementation among these three solvers are as follows: 
- <b>Direct multiple shooting method</b> [1, 2]:
    - has a nice convergence property.
    - fully leverages parallel computation of the KKT system with OpenMP.
- <b>Primal-dual interior point method</b> [3, 4]: 
    - can treat many inequality constraints including nonlinear ones very efficiently.
    - allows infeasible initial guess of the solution.
    - enables us to perform very fast suboptimal MPC by fixing the barrier parameter.
- <b>Gauss-Newton method</b>:
    - improves computational speed and numerical conditioning.
- <b>Structure-exploting algorithms to compute Newton steps</b> [2, 4, 5]: 
    - can compute the Newton steps with linear time complexity with respect to the length of the horizon.
- <b>Very fast rigid body kinematics and dynamics computation</b> thanks to [Pinocchio](https://github.com/stack-of-tasks/pinocchio).
    - [Pinocchio](https://github.com/stack-of-tasks/pinocchio) provides very efficient forward kinematics, kinematics Jacobians, the recursive Newton Euler algorithm (RNEA), and derivatives of the RNEA [6].
    - [Pinocchio](https://github.com/stack-of-tasks/pinocchio) also gives us an interface to construct a robot model (`robotoc::Robot`) via URDF files.
- <b>Versatile cost function and constraints interface</b>:
    - new cost compoments can be easily defined by inheriting `robotoc::CostFunctionComponentBase`.
    - The cost function can be easily be constructed by collecting cost components into `robotoc::CostFunction`
    - new constraint compoments can be easily defined by inheriting `robotoc::ConstraintComponentBase` or `robotoc::ImpulseConstraintComponentBase`.
    - The constraints can be easily be constructed by collecting constraint components into `robotoc::Constraints`

\section ocp_solver robotoc::OCPSolver

\subsection ocp_solver_features Features
`robotoc::OCPSolver` is an optimal control solver for robot systems with rigid contacts and/or a floating base.
This is the main solver of `robotoc`.
The unique features of `robotoc::OCPSolver` are:
- <b>Multiphase optimal control problem</b> construction through the contact sequence interface: 
    - `robotoc::ContactSequence` interface enables us to formulate the complicated optimal control problems involving changes of dynamics and state jumps due to rigid contacts.
- <b>Lifted contact dynamics</b> [7]: 
    - Relaxes the high nonlinearity in optimization problems typically caused by inequality constraints treated by the interior point methods.
- <b>Riccati recursion for switching time optimization (STO) problems</b> [8]: 
    - Computes the Newton steps including the switching times with linear time complexity with respect to the length of the horizon. Moreover, the Riccati-recursion-based Hessian modification improves numerical stability.  
- <b>Constraint transformation of pure-state constraints for efficient Riccati recursion</b> [9]: 
    - The pure-state equality constraints representing the switching constraints are treated very efficiently while preserving accuracy and guaranteeing optimality by the constraint transformation.

\subsection ocp_solver_formulation Methematical formulation
TODO 

\subsection ocp_solver_algorithm Solution algorithm
TODO 
 

\section unconstr_ocp_solver robotoc::UnconstrOCPSolver
\subsection unconstr_ocp_solver_features Features
`robotoc::UnconstrOCPSolver` is an optimal control solver for robot systems without rigid contacts or a floating base. This is recommended than `robotoc::OCPSolver` for such systems.
The unique features of `robotoc::UnconstrOCPSolver` are:
- <b>Inverse dynamics based formulation</b> [10]: 
    - Inverse dynamics-based formulation enables very fast computation compared with the forward dynamics-based formulation. You can check this fact easily by comparing `robotoc::UnconstrOCPSolver` and `robotoc::OCPSolver`.
- <b>Riccati recursion to compute Newton steps</b> [2, 4]: 
    - Computes the Newton steps with linear time complexity with respect to the length of the horizon.

\subsection unconstr_ocp_solver_formulation Methematical formulation
TODO 

\subsection unconstr_ocp_solver_algorithm Solution algorithm
TODO 


\section unconstr_parnmpc_solver robotoc::UnconstrParNMPCSolver
\subsection unconstr_parnmpc_solver_features Features
`robotoc::UnconstrParNMPCSolver` is an optimal control solver for robot systems without rigid contacts or a floating base. This is recommended than `robotoc::UnconstrOCPSolver` if the available number of CPU cores are very large.
The unique features of `robotoc::UnconstrParNMPCSolver` are:
- <b>Inverse dynamics based formulation</b> [10]: 
    - Inverse dynamics-based formulation enables very fast computation compared with the forward dynamics-based formulation. 
- <b>Highly parallelizable Newton-type method</b> [5]: 
    - This method can parallelize all steps of Newton-step computation while the Riccati recursion needs serial computation in solving the KKT system. Note that the convergence speed can decrease because this method introduces an approximation for parallelization.

\subsection unconstr_parnmpc_solver_formulation Methematical formulation
TODO 

\subsection unconstr_parnmpc_solver_algorithm Solution algorithm
TODO 


\section features_references References

[1] H. Bock and K. Plitt, "A multiple shooting algorithm for direct solution of optimal control problems," in 9th IFAC World Congress, pp.1603–1608, 1984. <br>
[2] J. B. Rawlings, D. Q. Mayne, and M. Diehl, <i>Model Predictive Control: Theory, Computation, and Design</i>, 2nd edition, Nob Hill Publishing, 2017. <br>
[3] J. Nocedal and S. J. Wright, <i>Numerical Optimization</i>, 2nd edition, Springer, 2006. <br>
[4] C. Rao, S. J. Wright, and J. B. Rawlings, "Application of interior-point methods to model predictive control," <i>Journal of Optimization Theory and Applications</i>, vol. 99, no. 3, pp. 723–757, 1998. <br>
[5] H. Deng and T. Ohtsuka, "A parallel Newton-type method for nonlinear model predictive control," <i>Automatica</i>, Vol. 109, pp. 108560, 2019. <br>
[6] J. Carpentier and N. Mansard, "Analytical derivatives of rigid body dynamics algorithms," Robotics: Science and Systems, 2018. <br>
[7] S. Katayama and T. Ohtsuka, "Lifted contact dynamics for efficient optimal control of rigid body systems with contacts," https://arxiv.org/abs/2108.01781, 2021 <br>
[8] S. Katayama and T. Ohtsuka, "Structure-exploiting {N}ewton-type method for optimal control of switched systems," https://arxiv.org/abs/2112.07232, 2021. <br>
[9] S. Katayama and T. Ohtsuka, "Efficient Riccati recursion for optimal control problems with pure-state equality constraints," https://arxiv.org/abs/2102.09731, 2021 <br>
[10] S. Katayama and T. Ohtsuka, "Efficient solution method based on inverse dynamics for optimal control problems of rigid body systems," IEEE International Conference on Robotics and Automation (ICRA), 2021. <br>

*/